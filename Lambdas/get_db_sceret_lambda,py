import json
import sys
# Use this code snippet in your app.
# If you need more information about configurations or implementing the sample code, visit the AWS docs:   
# https://aws.amazon.com/developers/getting-started/python/

import boto3
import base64
from botocore.exceptions import ClientError
import logging
import os
import pymysql
import db

database = db.DB()

logger = logging.getLogger()
logger.setLevel(logging.INFO)
port = 3306


def get_secret():

    secret_name = "resourcesDB_credentials"
    region_name = "us-east-1"

    # Create a Secrets Manager client
    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name
    )

    # In this sample we only handle the specific exceptions for the 'GetSecretValue' API.
    # See https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
    # We rethrow the exception by default.

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except ClientError as e:
        if e.response['Error']['Code'] == 'DecryptionFailureException':
            # Secrets Manager can't decrypt the protected secret text using the provided KMS key.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InternalServiceErrorException':
            # An error occurred on the server side.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidParameterException':
            # You provided an invalid value for a parameter.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidRequestException':
            # You provided a parameter value that is not valid for the current state of the resource.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'ResourceNotFoundException':
            # We can't find the resource that you asked for.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
    else:
        # Decrypts secret using the associated KMS key.
        # Depending on whether the secret is a string or binary, one of these fields will be populated.
        if 'SecretString' in get_secret_value_response:
            secret = get_secret_value_response['SecretString']
            return secret 
        else:
            decoded_binary_secret = base64.b64decode(get_secret_value_response['SecretBinary'])
            print(decoded_binary_secret)
            


def lambda_handler(event, context):
    
    result = json.loads(get_secret())
    print(result)
    
    # Retreive RDS details from the AWS Secrets Manager response
    host = result.get('host')
    port = result.get('port')
    username = result.get('username')
    password = result.get('password')
    db_name = "resources"
    
    logger.info(f"host = {host}")
    logger.info(f"username = {username}")
    logger.info(f"password = {password}") 
    logger.info(f"db_name={db_name}") 
  
    # Test RDS connection with the retrieved credentials from AWS Secrets Manager
    try:
        conn = pymysql.connect(host=host, user=username, passwd=password, db=db_name, connect_timeout=5)
        cursor = conn.cursor()
    except pymysql.MySQLError as e:
        logger.error("ERROR: Unexpected error: Could not connect to MySQL instance.")
        logger.error(e)
        sys.exit()
    
    logger.info("SUCCESS: Connection to RDS MySQL instance succeeded")
    
    cursor.execute("SHOW TABLES LIKE 'talentpool'")
    result = cursor.fetchone()
     
    ##### START: For DIY section: Uncomment below section to test retrieving data from RDS ######    
    # if not result:
    #     load_data()
    # else:
    #     query_result = custom_query(host,username,password,db_name,port)
    #     print('query result is: ',query_result)
    #     return(query_result)
    
    ###### END: Uncomment section to test retrieving data from RDS ######

def custom_query(host,username,password,db_name,port):
    
    custom_sql = """
        SELECT * FROM talentpool
        WHERE occupation LIKE 'Toxicologist';
        """
    
    custom_query = database.query(custom_sql,host,username,password,db_name,port)
    logger.info(custom_query)
    return (custom_query)
    